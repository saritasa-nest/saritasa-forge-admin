// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Saritasa.NetForge.Demo;

#nullable disable

namespace Saritasa.NetForge.Demo.Net7.Migrations
{
    [DbContext(typeof(ShopDbContext))]
    partial class ShopDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .IsUnicode(false)
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .IsUnicode(false)
                        .HasColumnType("text")
                        .HasColumnName("concurrency_stamp");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .IsUnicode(false)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("name");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .IsUnicode(false)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("normalized_name");

                    b.HasKey("Id")
                        .HasName("pk_asp_net_roles");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .IsUnicode(false)
                        .HasColumnType("text")
                        .HasColumnName("claim_type");

                    b.Property<string>("ClaimValue")
                        .IsUnicode(false)
                        .HasColumnType("text")
                        .HasColumnName("claim_value");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("text")
                        .HasColumnName("role_id");

                    b.HasKey("Id")
                        .HasName("pk_asp_net_role_claims");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("ix_asp_net_role_claims_role_id");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .IsUnicode(false)
                        .HasColumnType("text")
                        .HasColumnName("claim_type");

                    b.Property<string>("ClaimValue")
                        .IsUnicode(false)
                        .HasColumnType("text")
                        .HasColumnName("claim_value");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_asp_net_user_claims");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_asp_net_user_claims_user_id");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .IsUnicode(false)
                        .HasColumnType("text")
                        .HasColumnName("login_provider");

                    b.Property<string>("ProviderKey")
                        .IsUnicode(false)
                        .HasColumnType("text")
                        .HasColumnName("provider_key");

                    b.Property<string>("ProviderDisplayName")
                        .IsUnicode(false)
                        .HasColumnType("text")
                        .HasColumnName("provider_display_name");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.HasKey("LoginProvider", "ProviderKey")
                        .HasName("pk_asp_net_user_logins");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_asp_net_user_logins_user_id");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .IsUnicode(false)
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.Property<string>("RoleId")
                        .IsUnicode(false)
                        .HasColumnType("text")
                        .HasColumnName("role_id");

                    b.HasKey("UserId", "RoleId")
                        .HasName("pk_asp_net_user_roles");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("ix_asp_net_user_roles_role_id");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .IsUnicode(false)
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.Property<string>("LoginProvider")
                        .IsUnicode(false)
                        .HasColumnType("text")
                        .HasColumnName("login_provider");

                    b.Property<string>("Name")
                        .IsUnicode(false)
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Value")
                        .IsUnicode(false)
                        .HasColumnType("text")
                        .HasColumnName("value");

                    b.HasKey("UserId", "LoginProvider", "Name")
                        .HasName("pk_asp_net_user_tokens");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ProductProductTag", b =>
                {
                    b.Property<int>("ProductsId")
                        .HasColumnType("integer")
                        .HasColumnName("products_id");

                    b.Property<int>("TagsId")
                        .HasColumnType("integer")
                        .HasColumnName("tags_id");

                    b.HasKey("ProductsId", "TagsId")
                        .HasName("pk_product_product_tag");

                    b.HasIndex("TagsId")
                        .HasDatabaseName("ix_product_product_tag_tags_id");

                    b.ToTable("product_product_tag", (string)null);
                });

            modelBuilder.Entity("Saritasa.NetForge.Demo.Models.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("City")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("text")
                        .HasColumnName("city");

                    b.Property<string>("ContactPhone")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("text")
                        .HasColumnName("contact_phone");

                    b.Property<string>("Country")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("text")
                        .HasColumnName("country");

                    b.Property<int>("CreatedByUserId")
                        .HasColumnType("integer")
                        .HasColumnName("created_by_user_id");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .IsUnicode(false)
                        .HasColumnType("text")
                        .HasColumnName("display_name")
                        .HasComputedColumnSql("city || ', ' || street", true);

                    b.Property<double>("Latitude")
                        .HasColumnType("double precision")
                        .HasColumnName("latitude");

                    b.Property<double>("Longitude")
                        .HasColumnType("double precision")
                        .HasColumnName("longitude");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("text")
                        .HasColumnName("postal_code");

                    b.Property<string>("Street")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("text")
                        .HasColumnName("street");

                    b.Property<int?>("UpdatedByUserId")
                        .HasColumnType("integer")
                        .HasColumnName("updated_by_user_id");

                    b.HasKey("Id")
                        .HasName("pk_addresses");

                    b.ToTable("addresses", null, t =>
                        {
                            t.HasComment("Represents the address of the shop.");
                        });
                });

            modelBuilder.Entity("Saritasa.NetForge.Demo.Models.ContactInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<TimeSpan?>("AvailabilityDuration")
                        .HasColumnType("interval")
                        .HasColumnName("availability_duration");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Email")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("text")
                        .HasColumnName("full_name");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("text")
                        .HasColumnName("phone_number");

                    b.HasKey("Id")
                        .HasName("pk_contact_infos");

                    b.ToTable("contact_infos", (string)null);
                });

            modelBuilder.Entity("Saritasa.NetForge.Demo.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("AveragePurchaseCount")
                        .HasColumnType("integer")
                        .HasColumnName("average_purchase_count");

                    b.Property<long>("Barcode")
                        .HasColumnType("bigint")
                        .HasColumnName("barcode");

                    b.Property<int>("Category")
                        .HasColumnType("integer")
                        .HasColumnName("category");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_date");

                    b.Property<string>("Description")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<DateTimeOffset?>("EndOfSalesDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("end_of_sales_date");

                    b.Property<float>("HeightInCentimeters")
                        .HasColumnType("real")
                        .HasColumnName("height_in_centimeters");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("boolean")
                        .HasColumnName("is_available");

                    b.Property<bool?>("IsSalesEnded")
                        .HasColumnType("boolean")
                        .HasColumnName("is_sales_ended");

                    b.Property<float>("LengthInCentimeters")
                        .HasColumnType("real")
                        .HasColumnName("length_in_centimeters");

                    b.Property<decimal?>("MaxPrice")
                        .HasColumnType("numeric")
                        .HasColumnName("max_price");

                    b.Property<string>("Name")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<DateOnly?>("NextSupplyDate")
                        .HasColumnType("date")
                        .HasColumnName("next_supply_date");

                    b.Property<DateOnly>("PreviousSupplyDate")
                        .HasColumnType("date")
                        .HasColumnName("previous_supply_date");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric")
                        .HasColumnName("price");

                    b.Property<DateTime?>("RemovedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("removed_at");

                    b.Property<int?>("ShopId")
                        .HasColumnType("integer")
                        .HasColumnName("shop_id");

                    b.Property<int>("StockQuantity")
                        .HasColumnType("integer")
                        .HasColumnName("stock_quantity");

                    b.Property<string>("SupplierCity")
                        .IsUnicode(false)
                        .HasColumnType("text")
                        .HasColumnName("supplier_city");

                    b.Property<string>("SupplierName")
                        .IsUnicode(false)
                        .HasColumnType("text")
                        .HasColumnName("supplier_name");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_date");

                    b.Property<double>("Volume")
                        .HasColumnType("double precision")
                        .HasColumnName("volume");

                    b.Property<float?>("WeightInGrams")
                        .HasColumnType("real")
                        .HasColumnName("weight_in_grams");

                    b.Property<float>("WidthInCentimeters")
                        .HasColumnType("real")
                        .HasColumnName("width_in_centimeters");

                    b.HasKey("Id")
                        .HasName("pk_products");

                    b.HasIndex("ShopId")
                        .HasDatabaseName("ix_products_shop_id");

                    b.HasIndex("SupplierName", "SupplierCity")
                        .HasDatabaseName("ix_products_supplier_name_supplier_city");

                    b.ToTable("products", null, t =>
                        {
                            t.HasComment("Represents single product in the Shop.");
                        });
                });

            modelBuilder.Entity("Saritasa.NetForge.Demo.Models.ProductTag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_product_tags");

                    b.ToTable("product_tags", (string)null);
                });

            modelBuilder.Entity("Saritasa.NetForge.Demo.Models.Shop", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("AddressId")
                        .HasColumnType("integer")
                        .HasColumnName("address_id");

                    b.Property<string>("BuildingPhoto")
                        .IsUnicode(false)
                        .HasColumnType("text")
                        .HasColumnName("building_photo");

                    b.Property<TimeOnly?>("CloseTime")
                        .HasColumnType("time without time zone")
                        .HasColumnName("close_time");

                    b.Property<bool>("IsOpen")
                        .HasColumnType("boolean")
                        .HasColumnName("is_open");

                    b.Property<string>("Logo")
                        .IsUnicode(false)
                        .HasColumnType("text")
                        .HasColumnName("logo");

                    b.Property<string>("Name")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<TimeOnly?>("OpenTime")
                        .HasColumnType("time without time zone")
                        .HasColumnName("open_time");

                    b.Property<DateTime>("OpenedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("opened_date");

                    b.Property<int?>("OwnerContactId")
                        .HasColumnType("integer")
                        .HasColumnName("owner_contact_id");

                    b.Property<decimal>("TotalSales")
                        .HasColumnType("numeric")
                        .HasColumnName("total_sales");

                    b.HasKey("Id")
                        .HasName("pk_shops");

                    b.HasIndex("AddressId")
                        .HasDatabaseName("ix_shops_address_id");

                    b.HasIndex("OwnerContactId")
                        .HasDatabaseName("ix_shops_owner_contact_id");

                    b.ToTable("shops", (string)null);
                });

            modelBuilder.Entity("Saritasa.NetForge.Demo.Models.ShopProductsCount", b =>
                {
                    b.Property<int>("ProductsCount")
                        .HasColumnType("integer")
                        .HasColumnName("products_count");

                    b.Property<int>("ShopId")
                        .HasColumnType("integer")
                        .HasColumnName("shop_id");

                    b.HasIndex("ShopId")
                        .HasDatabaseName("ix_shop_products_counts_shop_id");

                    b.ToTable("shop_products_counts", (string)null);
                });

            modelBuilder.Entity("Saritasa.NetForge.Demo.Models.Supplier", b =>
                {
                    b.Property<string>("Name")
                        .IsUnicode(false)
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("City")
                        .IsUnicode(false)
                        .HasColumnType("text")
                        .HasColumnName("city");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.HasKey("Name", "City")
                        .HasName("pk_suppliers");

                    b.ToTable("suppliers", (string)null);
                });

            modelBuilder.Entity("Saritasa.NetForge.Demo.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .IsUnicode(false)
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer")
                        .HasColumnName("access_failed_count");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .IsUnicode(false)
                        .HasColumnType("text")
                        .HasColumnName("concurrency_stamp");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_of_birth");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .IsUnicode(false)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("email");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean")
                        .HasColumnName("email_confirmed");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("text")
                        .HasColumnName("first_name");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("text")
                        .HasColumnName("last_name");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean")
                        .HasColumnName("lockout_enabled");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("lockout_end");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .IsUnicode(false)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("normalized_email");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .IsUnicode(false)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("normalized_user_name");

                    b.Property<string>("PasswordHash")
                        .IsUnicode(false)
                        .HasColumnType("text")
                        .HasColumnName("password_hash");

                    b.Property<string>("PhoneNumber")
                        .IsUnicode(false)
                        .HasColumnType("text")
                        .HasColumnName("phone_number");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean")
                        .HasColumnName("phone_number_confirmed");

                    b.Property<string>("SecurityStamp")
                        .IsUnicode(false)
                        .HasColumnType("text")
                        .HasColumnName("security_stamp");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean")
                        .HasColumnName("two_factor_enabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .IsUnicode(false)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("user_name");

                    b.HasKey("Id")
                        .HasName("pk_asp_net_users");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("ShopSupplier", b =>
                {
                    b.Property<int>("ShopsId")
                        .HasColumnType("integer")
                        .HasColumnName("shops_id");

                    b.Property<string>("SuppliersName")
                        .IsUnicode(false)
                        .HasColumnType("text")
                        .HasColumnName("suppliers_name");

                    b.Property<string>("SuppliersCity")
                        .IsUnicode(false)
                        .HasColumnType("text")
                        .HasColumnName("suppliers_city");

                    b.HasKey("ShopsId", "SuppliersName", "SuppliersCity")
                        .HasName("pk_shop_supplier");

                    b.HasIndex("SuppliersName", "SuppliersCity")
                        .HasDatabaseName("ix_shop_supplier_suppliers_name_suppliers_city");

                    b.ToTable("shop_supplier", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_asp_net_role_claims_asp_net_roles_role_id");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Saritasa.NetForge.Demo.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_asp_net_user_claims_asp_net_users_user_id");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Saritasa.NetForge.Demo.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_asp_net_user_logins_asp_net_users_user_id");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_asp_net_user_roles_asp_net_roles_role_id");

                    b.HasOne("Saritasa.NetForge.Demo.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_asp_net_user_roles_asp_net_users_user_id");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Saritasa.NetForge.Demo.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_asp_net_user_tokens_asp_net_users_user_id");
                });

            modelBuilder.Entity("ProductProductTag", b =>
                {
                    b.HasOne("Saritasa.NetForge.Demo.Models.Product", null)
                        .WithMany()
                        .HasForeignKey("ProductsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_product_product_tag_products_products_id");

                    b.HasOne("Saritasa.NetForge.Demo.Models.ProductTag", null)
                        .WithMany()
                        .HasForeignKey("TagsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_product_product_tag_product_tags_tags_id");
                });

            modelBuilder.Entity("Saritasa.NetForge.Demo.Models.Product", b =>
                {
                    b.HasOne("Saritasa.NetForge.Demo.Models.Shop", "Shop")
                        .WithMany("Products")
                        .HasForeignKey("ShopId")
                        .HasConstraintName("fk_products_shops_shop_id");

                    b.HasOne("Saritasa.NetForge.Demo.Models.Supplier", "Supplier")
                        .WithMany()
                        .HasForeignKey("SupplierName", "SupplierCity")
                        .HasConstraintName("fk_products_suppliers_supplier_name_supplier_city");

                    b.Navigation("Shop");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("Saritasa.NetForge.Demo.Models.Shop", b =>
                {
                    b.HasOne("Saritasa.NetForge.Demo.Models.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId")
                        .HasConstraintName("fk_shops_addresses_address_id");

                    b.HasOne("Saritasa.NetForge.Demo.Models.ContactInfo", "OwnerContact")
                        .WithMany()
                        .HasForeignKey("OwnerContactId")
                        .HasConstraintName("fk_shops_contact_infos_owner_contact_id");

                    b.Navigation("Address");

                    b.Navigation("OwnerContact");
                });

            modelBuilder.Entity("Saritasa.NetForge.Demo.Models.ShopProductsCount", b =>
                {
                    b.HasOne("Saritasa.NetForge.Demo.Models.Shop", "Shop")
                        .WithMany()
                        .HasForeignKey("ShopId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_shop_products_counts_shops_shop_id");

                    b.Navigation("Shop");
                });

            modelBuilder.Entity("ShopSupplier", b =>
                {
                    b.HasOne("Saritasa.NetForge.Demo.Models.Shop", null)
                        .WithMany()
                        .HasForeignKey("ShopsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_shop_supplier_shops_shops_id");

                    b.HasOne("Saritasa.NetForge.Demo.Models.Supplier", null)
                        .WithMany()
                        .HasForeignKey("SuppliersName", "SuppliersCity")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_shop_supplier_suppliers_suppliers_name_suppliers_city");
                });

            modelBuilder.Entity("Saritasa.NetForge.Demo.Models.Shop", b =>
                {
                    b.Navigation("Products");
                });
#pragma warning restore 612, 618
        }
    }
}
