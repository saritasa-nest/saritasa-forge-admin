@using Saritasa.NetForge.Blazor.Controls
@using Saritasa.NetForge.Blazor.Controls.CustomFields
@using Saritasa.NetForge.Blazor.Domain.UseCases.Metadata.GetEntityById
@using Saritasa.NetForge.Blazor.Extensions
@using Saritasa.NetForge.Blazor.Infrastructure.Helpers
@using Saritasa.NetForge.Blazor.MVVM.ViewModels
@using Saritasa.NetForge.Blazor.MVVM.ViewModels.EditEntity

@inherits MvvmComponentBase<EditEntityViewModel>

@if (ViewModel.Model.EntityInstance is null)
{
    <p>Loading...</p>
}
else if (ViewModel.IsEntityExists)
{
    <MudBreadcrumbs Items="breadcrumbItems"></MudBreadcrumbs>

    var title = $"Edit {ViewModel.Model.DisplayName.ToMeaningfulName()}";
    <PageTitle>@title</PageTitle>
    <MudText Class="pb-4" Typo="Typo.h4">@title</MudText>

    if (ViewModel.Model.Properties.Any())
    {
        <MudGrid Justify="Justify.Center">
            <MudItem xs="6">
                @if (!string.IsNullOrEmpty(ViewModel.GeneralError))
                {
                    <MudAlert Severity="Severity.Error" Class="mb-5">@ViewModel.GeneralError</MudAlert>
                }

                <EditForm Model="ViewModel.Model.EntityInstance" OnValidSubmit="ViewModel.UpdateEntityAsync">
                    <div class="d-flex flex-column flex-grow-1 gap-4">
                        @foreach (var property in ViewModel.Model.Properties)
                        {
                            // If there is no error view model for the property, create a new one
                            var fieldError = ViewModel.FieldErrorModels.FirstOrDefault(e => e.Property.Name == property.Name);
                            if (fieldError == null)
                            {
                                fieldError = new FieldErrorModel
                                {
                                    Property = property
                                };
                                ViewModel.FieldErrorModels.Add(fieldError);
                            }

                            var componentType = CustomFieldHelper.GetComponentType(property);
                            var parameters = new Dictionary<string, object>
                            {
                                { "Property", property },
                                { "EntityInstance", ViewModel.Model.EntityInstance },
                                { "IsReadOnly", property.IsPrimaryKey || property.IsReadOnly },
                                { "FieldErrorModel", fieldError }
                            };

                            if (property.UploadFileStrategy is not null)
                            {
                                parameters.Add(
                                    nameof(UploadImage.OnFileSelected),
                                    (Action<PropertyMetadataDto, IBrowserFile?>)ViewModel.HandleSelectedFile);
                            }

                            <DynamicComponent Type="componentType" Parameters="parameters"/>
                        }

                        <div class="d-flex flex-row gap-4 pt-4">
                            <MudButton Variant="Variant.Outlined" OnClick="NavigateToPreviousPage">
                                Cancel
                            </MudButton>
                            <MudButton Variant="Variant.Outlined" Color="Color.Success" ButtonType="ButtonType.Submit">
                                Save
                            </MudButton>
                        </div>

                        @if (ViewModel.Errors is not null && ViewModel.Errors.Count != 0)
                        {
                            <MudAlert Variant="Variant.Outlined"
                                      Severity="Severity.Error"
                                      NoIcon>
                                @foreach (var error in ViewModel.Errors)
                                {
                                    <MudText>@error.ErrorMessage</MudText>
                                }
                            </MudAlert>
                        }
                    </div>
                </EditForm>
            </MudItem>
        </MudGrid>
    }
    else
    {
        <MudText>There are no properties to display for the entity.</MudText>
    }
}
else
{
    <NotFound />
}
