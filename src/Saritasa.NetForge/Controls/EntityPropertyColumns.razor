@using Saritasa.NetForge.Domain.Enums
@using Saritasa.NetForge.Domain.Extensions
@using Saritasa.NetForge.Domain.UseCases.Constants
@using Saritasa.NetForge.Domain.UseCases.Metadata.GetEntityById
@using Saritasa.NetForge.Extensions

@if (CanDelete)
{
    <SelectColumn T="object" ShowInFooter="false" />
}

@{
    List<(PropertyMetadataDto Property, string PropertyPath)> propertyPaths = [];
    foreach (var property in Properties.Where(property => property is { IsHidden: false, IsHiddenFromListView: false }))
    {
        if (property is NavigationMetadataDto navigation)
        {
            if (!navigation.IsCollection)
            {
                var propertyPath = navigation.Name;

                HandleNavigation(navigation);

                void HandleNavigation(NavigationMetadataDto navigation)
                {
                    var targetNavigationProperties = navigation.TargetEntityProperties
                        .Where(targetProperty => targetProperty is { IsHidden: false, IsHiddenFromListView: false });
                    foreach (var targetProperty in targetNavigationProperties)
                    {
                        propertyPaths.Add((targetProperty, $"{propertyPath}.{targetProperty.Name}"));
                    }

                    foreach (var targetNavigation in navigation.TargetEntityNavigations
                                 .Where(targetNavigation => targetNavigation is { IsHidden: false, IsHiddenFromListView: false }))
                    {
                        propertyPath += $".{targetNavigation.Name}";
                        HandleNavigation(targetNavigation);
                        propertyPath = propertyPath.Replace($".{targetNavigation.Name}", string.Empty);
                    }
                }
            }
            else
            {
                propertyPaths.Add((property, $"{property.Name}"));
            }
        }
        else
        {
            propertyPaths.Add((property, property.Name));
        }
    }

    // Display principal entity primary key at the start of columns if the order is not set.
    var orderedProperties = propertyPaths
        .OrderByDescending(property => property is { Property: { IsPrimaryKey: true, Order: null } }
                                       && !property.PropertyPath.Contains(".")) // Means property is not part of a navigation
        .ThenByDescending(property => property.Property.Order.HasValue)
        .ThenBy(property => property.Property.Order);
    foreach (var (property, propertyPath) in orderedProperties)
    {
        RenderPropertyColumn(property, propertyPath, navigation: null);
    }

    void RenderPropertyColumn(PropertyMetadataDto property, string propertyPath, NavigationMetadataDto? navigation = null)
    {
        <TemplateColumn T="object" Title="@property.Name" Sortable="property.IsSortable"
                        NavigationName="@navigation?.Name">
            <HeaderTemplate>
                @{
                    var displayName = GetPropertyDisplayName(property);
                    if (AdminOptions.TitleCaseProperties)
                    {
                        displayName = displayName.ToMeaningfulName();
                    }

                    <div class="entity-details-grid__header-cell">
                        @if (string.IsNullOrEmpty(property.Description))
                        {
                            @displayName
                        }
                        else
                        {
                            <MudTooltip Arrow="true" Placement="@Placement.Top">
                                <ChildContent>
                                    @displayName
                                </ChildContent>
                                <TooltipContent>
                                    <MudText Typo="@Typo.body2">@property.Description</MudText>
                                </TooltipContent>
                            </MudTooltip>
                        }

                        @if (property.SearchType != SearchType.None)
                        {
                            <div class="entity-details-grid__small-icon">
                                <MudTooltip Text="@property.SearchType.ToString().ToMeaningfulName()"
                                            Arrow="true"
                                            Placement="Placement.Bottom">
                                    <MudIcon Icon="@Icons.Material.Filled.Search" Size="Size.Small"/>
                                </MudTooltip>
                            </div>
                        }
                    </div>}
            </HeaderTemplate>

            <CellTemplate Context="cell">
                @{
                    var instance = cell.Item;
                    var propertyValue = instance.GetNestedPropertyValue(propertyPath);

                    if (property is NavigationMetadataDto navigationMetadata)
                    {
                        propertyValue = GetNavigationValue(propertyValue, navigationMetadata);
                    }
                    else
                    {
                        if (propertyValue is null || propertyValue.ToString() == string.Empty)
                        {
                            propertyValue = !string.IsNullOrEmpty(property.EmptyValueDisplay)
                                ? property.EmptyValueDisplay
                                : DefaultValueConstants.DefaultEmptyPropertyValueDisplay;
                        }

                        propertyValue = FormatValue(propertyValue, property.Name);

                        if (property.ClrType == typeof(string) && !property.IsImage)
                        {
                            var stringValue = propertyValue.ToString();

                            var maxCharacters = property.TruncationMaxCharacters ?? AdminOptions.TruncationMaxCharacters;

                            if (maxCharacters != default)
                            {
                                propertyValue = stringValue!.Truncate(maxCharacters);
                            }
                        }
                    }

                    if (propertyValue!.Equals(property.EmptyValueDisplay)
                        || propertyValue.Equals(DefaultValueConstants.DefaultEmptyPropertyValueDisplay))
                    {
                        @propertyValue
                    }
                    else if (property.IsImage)
                    {
                        <div>
                            <MudImage Src="@property.UploadFileStrategy!.GetFileSource(propertyValue.ToString())"
                                      Elevation="25"
                                      Class="rounded-lg property-image"/>
                        </div>
                    }
                    else if (property.DisplayAsHtml)
                    {
                        @((MarkupString)propertyValue!)
                    }
                    else if (navigation is not null && property.CanBeNavigatedToDetails)
                    {
                        var navigationInstance = cell.Item.GetPropertyValue(navigation.Name)!;
                        <MudButton Variant="Variant.Text" Color="Color.Primary" Class="text-tranform-none"
                                   OnClick="() => NavigateToEditing(navigationInstance, navigation)">
                            @propertyValue
                        </MudButton>
                    }
                    else if (navigation is not null && (property.CanDisplayDetails || navigation.IsCollection))
                    {
                        var navigationInstance = cell.Item.GetPropertyValue(navigation.Name)!;
                        <MudButton Variant="Variant.Text" Color="Color.Primary" Class="text-tranform-none"
                                   @onclick="() => OpenDialogAsync(navigationInstance, navigation)">
                            @propertyValue
                        </MudButton>
                    }
                    else
                    {
                        @propertyValue
                    }
                }
            </CellTemplate>
        </TemplateColumn>
    }
}

@if (CanDelete)
{
    <TemplateColumn T="object">
        <CellTemplate>
            <MudButton Size="@Size.Small" Variant="Variant.Text" Color="Color.Secondary"
                       OnClick="@(() => ShowDeleteEntityConfirmationAsync(context.Item))">
                Delete
            </MudButton>
        </CellTemplate>
    </TemplateColumn>
}
