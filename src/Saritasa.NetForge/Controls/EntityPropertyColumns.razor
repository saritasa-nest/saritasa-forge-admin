@using Saritasa.NetForge.Domain.Dtos
@using Saritasa.NetForge.Domain.Enums
@using Saritasa.NetForge.Domain.Extensions
@using Saritasa.NetForge.Domain.UseCases.Constants
@using Saritasa.NetForge.Domain.UseCases.Metadata.GetEntityById
@using Saritasa.NetForge.Extensions

@if (CanDelete)
{
    <SelectColumn T="object" ShowInFooter="false" />
}

@{
    var listViewProperties = GetListViewProperties();
    foreach (var listViewProperty in listViewProperties)
    {
        RenderPropertyColumn(listViewProperty);
    }

    void RenderPropertyColumn(ListViewPropertyDto listViewProperty)
    {
        var property = listViewProperty.Property;
        var navigation = listViewProperty.Navigation;
        <TemplateColumn T="object" Title="@property.Name" Sortable="property.IsSortable"
                        PropertyPath="@listViewProperty.PropertyPath">
            <HeaderTemplate>
                @{
                    var displayName = GetPropertyDisplayName(property);
                    if (AdminOptions.TitleCaseProperties)
                    {
                        displayName = displayName.ToMeaningfulName();
                    }

                    <div class="entity-details-grid__header-cell">
                        @if (string.IsNullOrEmpty(property.Description))
                        {
                            @displayName
                        }
                        else
                        {
                            <MudTooltip Arrow="true" Placement="@Placement.Top">
                                <ChildContent>
                                    @displayName
                                </ChildContent>
                                <TooltipContent>
                                    <MudText Typo="@Typo.body2">@property.Description</MudText>
                                </TooltipContent>
                            </MudTooltip>
                        }

                        @if (property.SearchType != SearchType.None)
                        {
                            <div class="entity-details-grid__small-icon">
                                <MudTooltip Text="@property.SearchType.ToString().ToMeaningfulName()"
                                            Arrow="true"
                                            Placement="Placement.Bottom">
                                    <MudIcon Icon="@Icons.Material.Filled.Search" Size="Size.Small"/>
                                </MudTooltip>
                            </div>
                        }
                    </div>
                }
            </HeaderTemplate>

            <CellTemplate Context="cell">
                @{
                    var instance = cell.Item;
                    var propertyValue = instance.GetNestedPropertyValue(listViewProperty.PropertyPath);

                    if (propertyValue is null || propertyValue.ToString() == string.Empty)
                    {
                        var emptyValue = !string.IsNullOrEmpty(property.EmptyValueDisplay)
                            ? property.EmptyValueDisplay
                            : DefaultValueConstants.DefaultEmptyPropertyValueDisplay;
                        @emptyValue
                        return;
                    }

                    if (property is NavigationMetadataDto navigationMetadata)
                    {
                        var navigationValue = GetNavigationValue(propertyValue, navigationMetadata);

                        if (navigationMetadata.IsCollection)
                        {
                            <MudButton Variant="Variant.Text" Color="Color.Primary" Class="text-transform-none"
                                       @onclick="() => OpenDialogAsync(propertyValue, navigationMetadata)">
                                @navigationValue
                            </MudButton>
                        }
                        else
                        {
                            @navigationValue
                        }
                        return;
                    }

                    if (property.IsImage)
                    {
                        <div>
                            <MudImage Src="@property.UploadFileStrategy!.GetFileSource(propertyValue.ToString()!)"
                                      Elevation="25"
                                      Class="rounded-lg property-image"/>
                        </div>
                        return;
                    }

                    var formattedValue = FormatValue(propertyValue, property);

                    if (property.DisplayAsHtml)
                    {
                        @((MarkupString)formattedValue)
                        return;
                    }

                    if (property.ClrType == typeof(string))
                    {
                        var maxCharacters = property.TruncationMaxCharacters ?? AdminOptions.TruncationMaxCharacters;

                        if (maxCharacters != default)
                        {
                            formattedValue = formattedValue!.Truncate(maxCharacters);
                        }
                    }

                    if (navigation is not null)
                    {
                        var navigationPath = RemoveLastPropertyFromPath(listViewProperty.PropertyPath);
                        var navigationValue = instance.GetNestedPropertyValue(navigationPath)!;

                        if (property.CanBeNavigatedToDetails)
                        {
                            <MudButton Variant="Variant.Text" Color="Color.Primary" Class="text-transform-none"
                                       OnClick="() => NavigateToEditing(navigationValue, navigation)">
                                @formattedValue
                            </MudButton>
                        }
                        else if (property.CanDisplayDetails)
                        {
                            <MudButton Variant="Variant.Text" Color="Color.Primary" Class="text-transform-none"
                                       @onclick="() => OpenDialogAsync(navigationValue, navigation)">
                                @formattedValue
                            </MudButton>
                        }
                        else
                        {
                            @formattedValue
                        }

                        return;
                    }

                    @formattedValue
                }
            </CellTemplate>
        </TemplateColumn>
    }
}

@if (CanDelete)
{
    <TemplateColumn T="object">
        <CellTemplate>
            <MudButton Size="@Size.Small" Variant="Variant.Text" Color="Color.Secondary"
                       OnClick="@(() => ShowDeleteEntityConfirmationAsync(context.Item))">
                Delete
            </MudButton>
        </CellTemplate>
    </TemplateColumn>
}
